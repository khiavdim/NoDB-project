{"version":3,"sources":["Components/Contact.js","Components/Title.js","Components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Contact","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","flipEdit","setState","editting","state","handleEdit","e","_e$target","target","name","value","defineProperty","saveEdit","editContact","contact","id","firstName","lastName","birthday","email","phone","image","relation","document","querySelector","classList","toggle","_this2","_this$state","react_default","a","createElement","className","src","alt","onClick","deleteContact","onChange","placeholder","type","Component","Title","Navbar","flipAdd","adding","handleChange","handleSubmit","addContact","Title_Title","align","App","newContact","axios","post","then","res","contacts","data","catch","err","console","log","put","concat","delete","get","_this3","Navbar_Navbar","getContact","map","Contact_Contact","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.850d05c6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Contact.css\";\n\nexport default class Contact extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editting: false,\n      firstName: props.contact.firstName,\n      lastName: props.contact.lastName,\n      birthday: props.contact.birthday,\n      email: props.contact.email,\n      phone: props.contact.phone,\n      image: props.contact.image,\n      relation: props.contact.relation\n    };\n  }\n  flipEdit = () => {\n    this.setState({\n      editting: !this.state.editting\n    });\n  };\n\n  handleEdit = e => {\n    let { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  saveEdit = e => {\n    this.props.editContact(this.props.contact.id, this.state);\n    this.setState({ editting: false });\n  };\n\n  flip() {\n    document.querySelector(\"#cardId\").classList.toggle(\"flip\");\n  }\n\n  render() {\n    let { contact } = this.props;\n    let {\n      firstName,\n      lastName,\n      birthday,\n      phone,\n      email,\n      relation,\n      image\n    } = this.state;\n    return (\n      <div className=\"contactWindow\">\n        <div className=\"allCards\">\n          <div className=\"front\">\n            <section className=\"contactInfo\">\n              <img src={contact.image} alt={contact.firstName} />\n              <header>\n                <h2>\n                  {contact.firstName} {contact.lastName}\n                </h2>\n              </header>\n              <p>birthday: {contact.birthday}</p>\n              <p>phone number: {contact.phone}</p>\n              <p>email: {contact.email}</p>\n              <p>relation: {contact.relation}</p>\n            </section>\n            <section className=\"buttons\">\n              <i className=\"fas fa-pen-square fa-2x\">\n                <span className=\"text\"> hover to edit</span>\n              </i>\n              <i\n                onClick={() => this.props.deleteContact(this.props.contact.id)}\n                className=\"fas fa-minus-square fa-2x\"\n              />\n            </section>\n          </div>\n\n          <div className=\"back\">\n            <img src={contact.image} alt={contact.firstName} />\n            <p>\n              <input\n                className=\"names\"\n                value={firstName}\n                onChange={this.handleEdit}\n                name=\"firstName\"\n                placeholder={contact.firstName}\n              />{\" \"}\n              {` `}\n              <input\n                className=\"names\"\n                value={lastName}\n                onChange={this.handleEdit}\n                name=\"lastName\"\n                placeholder={contact.lastName}\n              />\n            </p>\n            <p>\n              <input\n                className=\"edit\"\n                value={birthday}\n                onChange={this.handleEdit}\n                name=\"birthday\"\n                placeholder={contact.birthday}\n              />\n            </p>\n            <p>\n              <input\n                className=\"edit\"\n                value={phone}\n                type=\"tel\"\n                onChange={this.handleEdit}\n                name=\"phone\"\n                placeholder={contact.phone}\n              />\n            </p>\n            <p>\n              <input\n                className=\"edit\"\n                value={email}\n                onChange={this.handleEdit}\n                name=\"email\"\n                placeholder={contact.email}\n              />\n            </p>\n            <p>\n              <input\n                className=\"edit\"\n                value={relation}\n                onChange={this.handleEdit}\n                name=\"relation\"\n                placeholder={contact.relation}\n              />\n            </p>\n            <p>\n              <input\n                className=\"edit\"\n                value={image}\n                onChange={this.handleEdit}\n                name=\"image\"\n                placeholder={contact.image}\n              />\n            </p>\n            <div className=\"buttons\">\n              <i\n                onClick={e => this.saveEdit(e)}\n                className=\"fas fa-check-square fa-2x\"\n              >\n                <span className=\"text\"> submit changes</span>\n              </i>\n              <i\n                onClick={() => this.props.deleteContact(this.props.contact.id)}\n                className=\"fas fa-minus-square fa-2x\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./Title.css\";\n\nexport default function Title() {\n  return (\n    <header className=\"title\">\n      <p>My</p>\n      <p>Address</p>\n      <p>Booklet</p>\n      <br />\n    </header>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./Navbar.css\";\nimport Title from \"./Title\";\n\nexport default class Navbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      adding: true,\n      firstName: \"\",\n      lastName: \"\",\n      birthday: \"\",\n      email: \"\",\n      phone: \"\",\n      image: \"\",\n      relation: \"\"\n    };\n  }\n\n  flipAdd = () => {\n    this.setState({\n      adding: !this.state.adding\n    });\n  };\n\n  handleChange = e => {\n    let { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = () => {\n    this.props.addContact(this.state);\n    this.setState({\n      firstName: \"\",\n      lastName: \"\",\n      birthday: \"\",\n      email: \"\",\n      phone: \"\",\n      image: \"\",\n      relation: \"\",\n      adding: false\n    });\n  };\n\n  render() {\n    let {\n      adding,\n      firstName,\n      lastName,\n      birthday,\n      email,\n      phone,\n      relation,\n      image\n    } = this.state;\n    return (\n      <div className=\"greenNav\">\n        <nav>\n          <Title />\n          {adding ? (\n            <section className=\"addSection\">\n              <div className=\"addDir\">add a new contact below</div>\n              <input\n                className=\"navInput\"\n                value={firstName}\n                onChange={this.handleChange}\n                name=\"firstName\"\n                placeholder=\"First Name\"\n              />\n              <input\n                className=\"navInput\"\n                value={lastName}\n                onChange={this.handleChange}\n                name=\"lastName\"\n                placeholder=\"Last Name\"\n              />\n              <input\n                className=\"navInput\"\n                value={birthday}\n                onChange={this.handleChange}\n                name=\"birthday\"\n                placeholder=\"Birthday\"\n              />\n              <input\n                className=\"navInput\"\n                value={phone}\n                onChange={this.handleChange}\n                name=\"phone\"\n                placeholder=\"Phone\"\n              />\n              <input\n                className=\"navInput\"\n                value={email}\n                onChange={this.handleChange}\n                name=\"email\"\n                placeholder=\"Email\"\n              />\n              <input\n                className=\"navInput\"\n                value={relation}\n                onChange={this.handleChange}\n                name=\"relation\"\n                placeholder=\"Relation\"\n              />\n              <input\n                className=\"navInput\"\n                value={image}\n                onChange={this.handleChange}\n                name=\"image\"\n                placeholder=\"Image URL\"\n              />\n              <div>\n                <button\n                  onClick={this.handleSubmit}\n                  id=\"navIcons\">add new contact\n                </button>\n              </div>\n            </section>\n          ) : (\n            <section className=\"addSection\">\n              <div className=\"addDir\">\n                successfully added<p>contact to the end</p>\n                <p>of your booklet</p>\n              </div>\n              <p>&emsp;</p>\n              <button \n                align=\"right\"\n                onClick={this.flipAdd}\n                id=\"navIcons1\"\n              > {\" \"}\n                add another contact\n              </button>\n            </section>\n          )}\n        </nav>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Contact from \"./Components/Contact\";\nimport Navbar from \"./Components/Navbar\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      contacts: [],\n      image: \"\"\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get(\"/api/contacts\")\n      .then(res => {\n        this.setState({ contacts: res.data });\n      })\n      .catch(err => {\n        console.log(\"Error from server\", err);\n      });\n  }\n\n  addContact = newContact => {\n    let {\n      image,\n      firstName,\n      lastName,\n      birthday,\n      email,\n      phone,\n      relation\n    } = newContact;\n    axios\n      .post(\"/api/contacts\", {\n        firstName,\n        lastName,\n        birthday,\n        email,\n        phone,\n        image,\n        relation\n      })\n\n      .then(res => {\n        this.setState({ contacts: res.data });\n      })\n      .catch(err => console.log(\"Error from server\", err));\n  };\n\n  editContact = (id, contact) => {\n    let {\n      image,\n      firstName,\n      lastName,\n      birthday,\n      phone,\n      email,\n      relation\n    } = contact;\n    axios\n      .put(\n        `/api/contacts/${id}?firstName=${firstName}\n        &lastName=${lastName}\n        &phone=${phone}\n        &email=${email}\n        &birthday=${birthday}\n        &image=${image}\n        &relation=${relation}`\n      )\n      .then(res => {\n        this.setState({ contacts: res.data });\n      })\n      .catch(err => {\n        console.log(\"Could not update contact\", err);\n      });\n  };\n\n  deleteContact = id => {\n    axios\n      .delete(`/api/contacts/${id}`)\n      .then(res => {\n        this.setState({ contacts: res.data });\n      })\n      .catch(err => console.log(\"Could not delete\", err));\n  };\n\n  render() {\n    let { contacts, image } = this.state;\n    return (\n      <div>\n        <div className=\"nav\">\n          <Navbar\n            contacts={contacts}\n            addContact={this.addContact}\n            image={image}\n            getContact={this.getContact}\n          />{\" \"}\n        </div>\n        <div className=\"rotate\">\n          {contacts.map(contact => {\n            return (\n              <Contact\n                id={contact.id}\n                key={contact.id}\n                contact={contact}\n                editContact={this.editContact}\n                deleteContact={this.deleteContact}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}